<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Développement (30min) on Documentation for Hugo Learn Theme</title>
    <link>http://localhost:1313/development/</link>
    <description>Recent content in Développement (30min) on Documentation for Hugo Learn Theme</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1313/development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>http://localhost:1313/development/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/development/introduction/</guid>
      <description>The Crazy Train application is made up of several microservices. The image below describes the overall operation&#xA;Below is a description of each service:&#xA;train-capture-image-app: This is a Quarkus service that allows you to start, test and stop video capture. It exposes RESTful endpoints that can be called by other services or clients to control video capture.&#xA;intelligent-train: This service is responsible for analysing the data from the captured video. It uses machine learning techniques to interpret the video data and provide information based on this analysis.</description>
    </item>
    <item>
      <title>Service Capture images</title>
      <link>http://localhost:1313/development/capture-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/development/capture-app/</guid>
      <description>capture-app is built using Quarkus, a full Java framework native to Kubernetes, designed for Java Virtual Machines (JVMs) and native compilation, optimising Java specifically for containers and enabling it to become an effective platform for serverless, cloud and Kubernetes environments.&#xA;The main functionality of the capture-app microservice is to control video capture. It offers the ability to start and stop video streaming, via exposed RESTful endpoints. These endpoints can be called from any client (such as a web browser or a curl command in a terminal) that supports HTTP.</description>
    </item>
    <item>
      <title>Service intelligent-train</title>
      <link>http://localhost:1313/development/intelligent-train/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/development/intelligent-train/</guid>
      <description>In this section we will import the new model trained in the first section.&#xA;Open a new terminal Run the commands below: cd intelligent-train curl -o models/model.onnx http://minio.minio:9000/&amp;lt;replace user_id with your assigned user name&amp;gt;/models/model.onnx </description>
    </item>
    <item>
      <title>Service train-ceq-app</title>
      <link>http://localhost:1313/development/train-ceq-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/development/train-ceq-app/</guid>
      <description>The train-ceq-app is an application based on Apache Camel, a Java library for implementing application integrations using Enterprise Integration Patterns (EIP). This application is mainly composed of Camel routes defined in the PostProcessingRoute.xml file. These routes define how messages are consumed, transformed and forwarded to other services or destinations.&#xA;The postproscessing-route performs the following operations:&#xA;Message consumption: The route first consumes messages from the MQTT broker using the paho:{{train.mqtt.source.topicName}}?brokerUrl={{train.mqtt.brokerUrl}} URI. The messages consumed are then recorded in the log.</description>
    </item>
    <item>
      <title>Service train-controller</title>
      <link>http://localhost:1313/development/train-controller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/development/train-controller/</guid>
      <description>Enjoy exploring the source code of this module.</description>
    </item>
    <item>
      <title>Service monitoring-app</title>
      <link>http://localhost:1313/development/monitoring-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/development/monitoring-app/</guid>
      <description>The monitoring-appp is an application which monitors the status and behaviour of the train and its associated components. This microservice is responsible for /l&amp;rsquo; :&#xA;Data collection: The monitoring-appp application collects data from a kafka topic. This includes events produced by train-ceq-app.&#xA;Data analysis: Once the data has been collected, the monitoring-appp application adds the predictions calculated above to the original image.&#xA;Data visualisation: The monitoring-appp application provides a user interface for viewing train data in real time.</description>
    </item>
    <item>
      <title>Start services</title>
      <link>http://localhost:1313/development/start-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/development/start-services/</guid>
      <description>From Devspaces, click on the search bar in the hat and choose &amp;ldquo;Run Task&amp;rdquo; from the drop-down list. ! Run Task menu&#xA;Select the start-all-apps task, this task will run all the previously modified applications in parallel.&#xA;Click on Continue without scanning the task outoput. Each application will start in a terminal. Terminals are accessible from the bottom right, Select &amp;rsquo;no&amp;rsquo; on the pop-up which indicates that a new process has started and that it is possible to make a port redirection.</description>
    </item>
    <item>
      <title>Test services</title>
      <link>http://localhost:1313/development/test-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/development/test-services/</guid>
      <description>We are going to simulate the operation of the train:&#xA;Open a new terminal Execute the command below to retrieve the URL of the monitoring console: oc get routes -o jsonpath=&amp;#39;{range .items[*]}{.metadata.annotation s.che\.routing\.controller\.devfile\.io/endpoint-name}{&amp;#34;\t&amp;#34;}{.spec.host}{&amp;#34;\n&amp;#34;}{end}&amp;#39; | gre p monitoring-svc | cut -f 2 Copy the URL, launch a new browser window in anonymous mode (in order to have an empty cache), insert the URL. Return to your terminal and run the following command: curl -X &amp;#39;POST&amp;#39; &amp;#39;http://localhost:8082/capture/test&amp;#39; -H &amp;#39;accept: */*&amp;#39; From your browser, you should be able to see the train simulation and the traffic sign detection in real time Well done!</description>
    </item>
    <item>
      <title>Conclusion</title>
      <link>http://localhost:1313/development/conclusion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/development/conclusion/</guid>
      <description>Congratulations, you&amp;rsquo;ve finished the development section! You should now have a better understanding of the Crazy Train application and its microservices-based architecture. The lab isn&amp;rsquo;t over yet! In the next section, we&amp;rsquo;re going to find out how to deploy our applications using gitops tools.</description>
    </item>
  </channel>
</rss>
