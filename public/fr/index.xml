<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome on Documentation du thème Hugo Learn</title>
    <link>http://localhost:1313/fr/</link>
    <description>Recent content in Welcome on Documentation du thème Hugo Learn</description>
    <generator>Hugo</generator>
    <language>fr</language>
    <atom:link href="http://localhost:1313/fr/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Objectif</title>
      <link>http://localhost:1313/fr/overview/goal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/fr/overview/goal/</guid>
      <description>Votre objectif sera de TODO</description>
    </item>
    <item>
      <title>Architecture</title>
      <link>http://localhost:1313/fr/overview/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/fr/overview/architecture/</guid>
      <description>Architecture TODO</description>
    </item>
    <item>
      <title>Introduction</title>
      <link>http://localhost:1313/fr/development/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/fr/development/introduction/</guid>
      <description>L&amp;rsquo;application Crazy Train est composée de plusieurs microservices. L&amp;rsquo;image ci-dessous décrit le fonctionnement global :&#xA;Ci-dessous une description de chaque service :&#xA;train-capture-image-app : C&amp;rsquo;est un service Quarkus qui permet de démarrer, tester et d&amp;rsquo;arrêter la capture vidéo. Il expose des points de terminaison RESTful qui peuvent être appelés par d&amp;rsquo;autres services ou clients pour contrôler la capture vidéo.&#xA;intelligent-train : Ce service est responsable de l&amp;rsquo;analyse des données de la vidéo capturée.</description>
    </item>
    <item>
      <title>Organisation</title>
      <link>http://localhost:1313/fr/overview/organization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/fr/overview/organization/</guid>
      <description>TODO</description>
    </item>
    <item>
      <title>Service Capture images</title>
      <link>http://localhost:1313/fr/development/capture-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/fr/development/capture-app/</guid>
      <description>capture-app est construite avec Quarkus, un framework Java complet, natif de Kubernetes, conçu pour les machines virtuelles Java (JVM) et la compilation native, optimisant Java spécifiquement pour les conteneurs et lui permettant de devenir une plateforme efficace pour les environnements serverless, cloud et Kubernetes.&#xA;La fonctionnalité principale du microservice capture-App est de contrôler la capture vidéo. Elle offre la possibilité de démarrer et d&amp;rsquo;arrêter le streaming vidéo, via des points de terminaison RESTful exposés.</description>
    </item>
    <item>
      <title>OpenShift</title>
      <link>http://localhost:1313/fr/overview/openshift/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/fr/overview/openshift/</guid>
      <description>OpenShift cluster TODO&#xA;Détails du cluster OpenShift URL de la console du cluster OCP : https://console-openshift-console.apps.TODO&#xA;URL de l&amp;rsquo;API du cluster OCP : https://api.TODO:6443&#xA;Il existe un utilisateur OpenShift dédié pour chaque utilisateur. Sur votre table, vous trouverez une affiche avec les informations pertinentes. Pour vous connecter à votre cluster Openshift, cliquez sur URL de la console OCP Cluster ci-dessus et renseignez votre nom d&amp;rsquo;utilisateur et votre mot de passe. Vous aurez accès au Terminal Web en cliquant sur l&amp;rsquo;icône &amp;gt;_ en haut à droite.</description>
    </item>
    <item>
      <title>Service intelligent-train</title>
      <link>http://localhost:1313/fr/development/intelligent-train/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/fr/development/intelligent-train/</guid>
      <description>Dans cette section nous allons importer le nouveau model entraîné dans la première section.&#xA;Ouvrez un nouveau terminal Lancez les commandes ci-dessous : cd intelligent-train curl -o models/model.onnx http://minio.minio:9000/&amp;lt;remplacez user_id par le nom d&amp;#39;utiliseur qui vous a été assigné&amp;gt;/models/model.onnx </description>
    </item>
    <item>
      <title>Service train-ceq-app</title>
      <link>http://localhost:1313/fr/development/train-ceq-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/fr/development/train-ceq-app/</guid>
      <description>Le train-ceq-app est une application basée sur Apache Camel, une bibliothèque Java pour la mise en œuvre des intégrations d&amp;rsquo;applications à l&amp;rsquo;aide de l&amp;rsquo;Enterprise Integration Patterns (EIP). Cette application est principalement composée de routes Camel définies dans le fichier PostProcessingRoute.xml. Ces routes définissent comment les messages sont consommés, transformés et transmis à d&amp;rsquo;autres services ou destinations.&#xA;La route postproscesing-route effectue les opérations suivantes:&#xA;Consommation des messages : La route commence par consommer les messages du broker MQTT à l&amp;rsquo;aide de l&amp;rsquo;URI paho:{{train.</description>
    </item>
    <item>
      <title>Service train-controller</title>
      <link>http://localhost:1313/fr/development/train-controller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/fr/development/train-controller/</guid>
      <description>Explorez le code de ce module !</description>
    </item>
    <item>
      <title>Service monitoring-appp</title>
      <link>http://localhost:1313/fr/development/monitoring-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/fr/development/monitoring-app/</guid>
      <description>Le monitoring-appp est une application qui surveille l&amp;rsquo;état et le comportement du train et de ses composants associés. Ce microservice est en charge de la /l&amp;rsquo; :&#xA;Collecte de données : L&amp;rsquo;application monitoring-appp collecte des données à partir d&amp;rsquo;un topic kafka. Cela inclut les événements produit par train-ceq-app.&#xA;Analyse des données : Une fois les données collectées, l&amp;rsquo;application monitoring-appp ajoute à l&amp;rsquo;image d&amp;rsquo;origine les prédiction calculées précedement.&#xA;Visualisation des données : L&amp;rsquo;application monitoring-appp fournit une interface utilisateur pour visualiser les données du train en temps réel.</description>
    </item>
    <item>
      <title>Start services</title>
      <link>http://localhost:1313/fr/development/start-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/fr/development/start-services/</guid>
      <description>A partir de Devspaces, cliquez sur la barre de recherche en hat et choisir dans la liste déroulante &amp;ldquo;Run Task&amp;rdquo; Sélectionnez la tâche start-all-apps, cette tâches lance en parallèles toutes les applications modifiées précédement.&#xA;Cliquez sur Continue without scanning the task outoput Chaque application démarrera dans un terminal. Les terminaux sont accessible en bas à droite, Séléctionnez &amp;rsquo;no&amp;rsquo; sur les pop-up qui indique qu&amp;rsquo;un nouveau processus a démarré et qu&amp;rsquo;il est possible de faire une redirection de port.</description>
    </item>
    <item>
      <title>Test services</title>
      <link>http://localhost:1313/fr/development/test-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/fr/development/test-services/</guid>
      <description>Nous allons simuler le fonctionnement du train :&#xA;Ouverez un nouveau terminal Executez la commande ci-dessous pour récupérer l&amp;rsquo;URL de la console de monitoring : oc get routes -o jsonpath=&amp;#39;{range .items[*]}{.metadata.annotation s.che\.routing\.controller\.devfile\.io/endpoint-name}{&amp;#34;\t&amp;#34;}{.spec.host}{&amp;#34;\n&amp;#34;}{end}&amp;#39; | gre p monitoring-svc | cut -f 2 Copiez l&amp;rsquo;URL, lancez une nouvelle fênetre de votre navigateur en mode anonyme (afin d&amp;rsquo;avoir un cache vide), insérez l&amp;rsquo;URL. Retournez à votre terminal et exécutez la commande suivante : curl -X &amp;#39;POST&amp;#39; &amp;#39;http://localhost:8082/capture/test&amp;#39; -H &amp;#39;accept: */*&amp;#39; A partir de votre navigateur vous devriez visualiser en temps réel la simulation du train et la détéction des panneaux de signalisation Bravo !</description>
    </item>
    <item>
      <title>Conclusion</title>
      <link>http://localhost:1313/fr/development/conclusion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/fr/development/conclusion/</guid>
      <description>Félicitations, vous avez terminé la section développement ! Vous devriez maintenant avoir une meilleure compréhension de l&amp;rsquo;application Crazy Train et de son architecture basée sur les microservices. Le lab n&amp;rsquo;est pas encore fini ! Dans la section suivante, nous allons découvrir comment déployer nos applications en utilisant les outils gitops</description>
    </item>
  </channel>
</rss>
